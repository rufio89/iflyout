(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.ProgrammingError\'> (1146, u"Table \'travel.airport_info\' doesn\'t exist")'
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/Travel/controllers/flights.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# try something like\nimport urllib2\nimport json\nimport datetime\n\ndef index():\n    rows = db((db.airport_info.three_letter_code)).select(db.airport_info.city,db.airport_info.three_letter_code)\n    json_data = json.dumps([{\'name\':r.city, \'code\':r.three_letter_code} for r in rows])\n    return dict(json_data=json_data)\n\n\n\n\ndef get_airport_code():\n    src = db((db.user_airport_code.created_by==auth.user.id)).select(db.user_airport_code.three_letter_code)\n    if not src:\n        src = \'\'\n    else:\n        src = src.first().three_letter_code\n    return src\n\ndef get_user_id():\n    user_id = auth.user.id\n    return user_id\n\n\n\ndef get_city_from_code(three_letter_code):\n    if(three_letter_code):\n        dest = db((db.airport_info.three_letter_code==three_letter_code)).select(db.airport_info.city).first().city\n    else:\n        dest = \'\'\n    return dest\n\n\ndef process_data():\n    dest_list = []\n    start_index = request.args[0]\n    start_index = start_index.replace(\'D\',\'\')\n    ttl_duration = request.args[1]\n    ttl_duration = ttl_duration.replace(\'F\',\'\')\n    source = request.args[2]\n    dest_count = len(request.args) - 3\n    for i in range(3, 3+dest_count):\n        dest_list.append(request.args[i])\n    start_index = int(start_index)\n    ttl_duration = int(ttl_duration)\n    weekend_dates = populate_weekend_dates(start_index, ttl_duration)\n    data = call_all_destinations(source, weekend_dates,dest_list, start_index)\n    data = XML(response.json(data))\n    return data\n\n\ndef request_flights(start_index, weekend_dates,departure_airport, dest):\n    json_list=[]\n    for arrival_airport in dest:\n        for date in weekend_dates:\n            departure_date = datetime.datetime.strftime(date,\'%Y-%m-%d\')\n            return_date = \'\'\n            if(start_index==4):\n                return_date = datetime.datetime.strftime(date+datetime.timedelta(3),\'%Y-%m-%d\')\n            elif(start_index==5):\n                return_date = datetime.datetime.strftime(date+datetime.timedelta(2),\'%Y-%m-%d\')\n            url = "http://partners.api.skyscanner.net/apiservices/browsedates/v1.0/US/USD/EN/"+departure_airport+"/"+arrival_airport+"/"+departure_date+"/"+return_date+"?apiKey=if781234598447854911313432786612"\n            flight_list = []\n            flight_info = { \'price\': None, \'airline\': None, \'departure_date\': None, \'return_date\':None, \'departure_airport\': None, \'arrival_airport\': None, \'url\': None}\n            try:\n                json_text = json.load( urllib2.urlopen(url))\n                if len(json_text["Quotes"]) > 0:\n                    flight_info["price"] = json_text["Quotes"][0].get("MinPrice", "")\n                    flight_info["airline"] = json_text["Carriers"][0].get("Name", "")\n                else:\n                    flight_info["price"] = None\n                    flight_info["airline"] = "No Airline"\n                    \n                flight_info["departure_date"] = departure_date\n                flight_info["return_date"] = return_date\n                flight_info["departure_airport"] = departure_airport\n                flight_info["arrival_airport"] = arrival_airport\n                flight_info["url"] = "https://www.skyscanner.net/transport/flights/" + departure_airport + "/" + arrival_airport + "/" + departure_date[2:4] + departure_date[5:7] + departure_date[8:10] +"/" + return_date[2:4] + return_date[5:7] + return_date[8:10]\n                json_list.append(flight_info)\n            except urllib2.HTTPError, e:\n                json_text = e.read()\n                json_list = json_text\n    return json.loads(json.dumps(json_list))\n\n\ndef populate_weekend_dates(start_index, ttl_duration):\n    today = datetime.datetime.today().weekday()\n    weekend_dates = []\n    start= \'\'\n    if(today>=1):\n        start = datetime.datetime.now() + datetime.timedelta(days=3)\n    else:\n        start = datetime.datetime.now()\n    #3 months into the future\n    end =  (start + datetime.timedelta(ttl_duration*365/12))\n    begin = start\n    delta = datetime.timedelta(days=1)\n    diff = 0\n    #ONLY CALCULATE FRIDAY SINCE YOU CAN DO THE MATH FOR SUNDAY..\n    weekend = \'\'\n    if(start_index==4):\n        weekend = set([3])\n    elif(start_index==5):\n        weekend = set([4])\n    else:\n        weekend = set([4])\n    while(begin<=end):\n            if(begin.weekday() in weekend):\n                    weekend_dates.append(begin)\n                    diff+=1\n            begin+=delta\n    return weekend_dates\n\ndef call_all_destinations(source, weekend_dates,dest, start_index):\n        data = request_flights(start_index, weekend_dates,source,dest)\n        return data\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/Travel/controllers/flights.py", line 121, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/applications/Travel/controllers/flights.py", line 8, in index\n    rows = db((db.airport_info.three_letter_code)).select(db.airport_info.city,db.airport_info.three_letter_code)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n    self.execute(sql)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/home/www-data/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/www-data/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, u"Table \'travel.airport_info\' doesn\'t exist")\n'
p11
s.