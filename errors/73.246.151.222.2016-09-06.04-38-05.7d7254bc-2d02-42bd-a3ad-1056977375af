(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.ProgrammingError\'> (1146, u"Table \'travel.auth_user\' doesn\'t exist")'
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/Travel/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nimport webbrowser\nimport gtk.gdk\nimport datetime\nimport time\nimport os, shutil\nimport glob\nimport pygeoip\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import TimeoutException\nfrom selenium.webdriver.common.by import By\nimport json\nimport requests\nimport os\nimport time\nimport threading\nfrom os import path\nfrom os import walk\nimport hashlib\nfrom pytesseract import image_to_string\nimport PIL\nfrom PIL import Image, ImageEnhance\nimport re\nimport cv2\nimport numpy as np\nimport operator\nfrom multiprocessing import Process\n\n#from gluon.debug import dbg\n\n\n\ndef index():\n    return dict(form=auth())\n\n@auth.requires_login()\ndef source():\n    src = get_airport_code()\n    if not src:\n        form = display_code_form()\n    else:\n        form = \'\'\n        redirect(URL(\'home\'))\n\n    return dict(form=form, src=src)\n\n\n@auth.requires_login()\ndef home():\n    src = str(get_airport_code())\n    unique_path = str(get_user_id())\n    dest = \'\'\n    full_dest =\'\'\n    if request.args==[]:\n        if(db((db.user_dest.created_by==auth.user.id)).select()):\n                if(db((db.user_request_images.created_by==auth.user.id)).select()):\n                    dest = db((db.user_request_images.created_by==auth.user.id)).select(db.user_request_images.destination_code, orderby=~db.user_request_images.created_on, limitby=(0,1)).first().destination_code\n                    full_dest = str(get_city_from_code(dest))\n                else:\n                    dest= \'\'\n                    full_dest = \'\'\n        else:\n          redirect(URL(\'destinations\'), client_side=True)      \n\n    else:\n        if request.args[0] == \'refresh\':\n            process_data()\n        dest = request.args[1]\n    path = request.env.web2py_path +\'/applications/\' +request.application + \'/static/images/user_images/\' + unique_path + \'/\' + src + \'/\' + dest + \'/\'\n    files= {}\n    image_rows = db((db.user_request_images.destination_code == dest) & (db.user_request_images.depart_date > datetime.date.today())).select(db.user_request_images.image_path, db.user_request_images.link_to)\n    for i in image_rows:\n        files[i.image_path] = i.link_to\n    dir_path = request.env.web2py_path +\'/applications/\' +request.application + \'/static/images/user_images/\' + unique_path + \'/\' + src + \'/\'\n    dirs = [x[0] for x in os.walk(dir_path)]\n    dirs = [d.replace(\'/home/www-data/web2py/applications/travel/static/images/user_images/\' + unique_path, \'\') for d in dirs]\n    if image_rows:\n        last_refreshed = db((db.user_flight_prices.dest_three_letter_code == dest) & (db.user_flight_prices.created_by==auth.user.id)).select(db.user_flight_prices.created_on, orderby=~db.user_flight_prices.created_on, limitby=(0,1)).first().created_on\n        # price_rows = db((db.user_flight_prices.dest_three_letter_code==dest) & (db.user_flight_prices.created_on==last_refreshed)).select(db.user_flight_prices.id, db.user_flight_prices.dest_three_letter_code,db.user_flight_prices.src_three_letter_code, db.user_flight_prices.departure_date, db.user_flight_prices.return_date,db.user_flight_prices.price,db.user_flight_prices.created_on, orderby=~db.user_flight_prices.departure_date | db.user_flight_prices.price, groupby=db.user_flight_prices.departure_date)\n        price_rows = db.executesql(\'SELECT  u.dest_three_letter_code, u.src_three_letter_code, u.departure_date, u.return_date, (SELECT u1.price FROM user_flight_prices u1 WHERE u1.created_on = \\\'\' + str(last_refreshed) + \'\\\' AND u1.dest_three_letter_code = \\\'\' + dest + \'\\\' AND u1.departure_date = u.departure_date ORDER BY price ASC LIMIT 1) AS price, u.created_on FROM user_flight_prices u INNER JOIN auth_user a ON a.id = u.created_by WHERE u.dest_three_letter_code = \\\'\' + dest + \'\\\' AND u.created_on = \\\'\' + str(last_refreshed) + \'\\\' GROUP BY u.departure_date ORDER BY u.created_on DESC\', as_dict = True)\n        lowest_price = db((db.user_flight_prices.dest_three_letter_code==dest) & (db.user_flight_prices.created_on==last_refreshed)).select(db.user_flight_prices.price, orderby=db.user_flight_prices.price, limitby=(0, 1)).first().price\n        flight_data = [{\'src\': r[\'src_three_letter_code\'], \'dest\': r[\'dest_three_letter_code\'], \'departure\' : r[\'departure_date\'], \'created_on\' :str(r[\'created_on\']), \'return_date\' : r[\'return_date\'], \'price\' :  r[\'price\'], \'link\': \'https://www.google.com/flights/#search;f=\' + r[\'src_three_letter_code\'] + \';t=\'+ r[\'dest_three_letter_code\'] +\';d=\' + r[\'departure_date\'] + \';r=\'  + r[\'return_date\'] +\'\' } for r in price_rows]\n        flight_data = sorted(flight_data, key = lambda item: item[\'departure\'])\n        flight_data = json.dumps(flight_data)\n        last_refreshed = last_refreshed.strftime("%m/%d/%Y %I:%M:%p")\n    else:\n        price_rows = \'\'\n        last_refreshed = \'\'\n        lowest_price = \'\'\n        flight_data = []\n    dest_picks = db((db.user_dest.created_by==auth.user.id)).select()\n    full_dest = str(get_city_from_code(dest))\n    return dict(lowest_price=lowest_price, files=files, dest=dest, dirs=dirs, src=src, last_refreshed=last_refreshed, dest_picks=dest_picks, unique_path=unique_path, full_dest=full_dest, flight_data = flight_data, price_rows=price_rows)\n\ndef images():\n    src = db((db.user_airport_code.created_by==auth.user.id)).select(db.user_request_images.image_path)\n    return dict(src=src)\n\ndef get_city_from_code(three_letter_code):\n    if(three_letter_code):\n        dest = db((db.airport_info.three_letter_code==three_letter_code)).select(db.airport_info.city).first().city\n    else:\n        dest = \'\'\n    return dest\n\ndef display_code_form():\n    form = SQLFORM(db.user_airport_code)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'home\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return form\n\ndef location():\n    ip = request.client\n    rawdata = pygeoip.GeoIP(request.env.web2py_path +\'/applications/\' +request.application + \'/static/GeoLiteCity.dat\')\n    data = rawdata.record_by_name(ip)\n    if data:\n        longi = data[\'longitude\']\n        lat = data[\'latitude\']\n    else:\n        lat = 100000\n        longi = -10000\n    return dict(lat=lat, longi=longi)\n\ndef get_airport_code():\n    src = db((db.user_airport_code.created_by==auth.user.id)).select(db.user_airport_code.three_letter_code)\n    if not src:\n        src = \'\'\n    else:\n        src = src.first().three_letter_code\n    return src\n\ndef image(): # http://.../image/where/ever/it/is.jpeg\n    filename = os.path.join(BASEDIR,\'/\'.join(request.args))\n    return response.stream(open(filename,\'rb\'))\n\ndef populate_weekend_dates(start_index, ttl_duration):\n    today = datetime.datetime.today().weekday()\n    weekend_dates = []\n    start= \'\'\n    if(today==3 or today==4):\n        start = datetime.datetime.now() + datetime.timedelta(days=3)\n    else:\n        start = datetime.datetime.now()\n    #3 months into the future\n    end =  (start + datetime.timedelta(ttl_duration*365/12))\n    begin = start\n    delta = datetime.timedelta(days=1)\n    diff = 0\n    #ONLY CALCULATE FRIDAY SINCE YOU CAN DO THE MATH FOR SUNDAY..\n    weekend = \'\'\n    if(start_index==4):\n        weekend = set([3])\n    elif(start_index==5):\n        weekend = set([4])\n    else:\n        weekend = set([4])\n    while(begin<=end):\n            if(begin.weekday() in weekend):\n                    weekend_dates.append(begin)\n                    diff+=1\n            begin+=delta\n    return weekend_dates\n\ndef browser_screenshot(url,start_date,end_date,dest,source):\n        unique_path = str(get_user_id())\n        browser = driver = webdriver.PhantomJS()\n        browser.get(url)\n        delay = 0\n        wait = WebDriverWait(browser, delay)\n        wait.until(EC.presence_of_element_located((By.ID, \'root\')))\n        time.sleep(1)\n        stringtime = str(start_date) + \'->\' + str(end_date)\n        newdir = request.env.web2py_path +\'/applications/travel/static/images/user_images/\' + unique_path + \'/\' + source + \'/\' + dest + "/"\n        if not os.path.exists(newdir):\n                os.makedirs(newdir)\n        filename = request.env.web2py_path +\'/applications/travel/static/images/user_images/\' + unique_path + \'/\' + source+ \'/\' + dest + \'/flight\' + stringtime + ".png"\n        image = \'flight\' + stringtime + ".png"\n        db.user_request_images.insert(image_path=image, link_to=url, source_code = source, destination_code = dest, depart_date = start_date, return_date = end_date )\n        browser.save_screenshot(filename)\n        browser.close()\n\n\ndef call_all_destinations(source, weekend_dates, dest, start_index):\n        for d in dest:\n            for date in weekend_dates:\n                start_date = datetime.datetime.strftime(date,\'%Y-%m-%d\')\n                end_date = \'\'\n                if(start_index==4):\n                    end_date = datetime.datetime.strftime(date+datetime.timedelta(3),\'%Y-%m-%d\')\n                elif(start_index==5):\n                    end_date = datetime.datetime.strftime(date+datetime.timedelta(2),\'%Y-%m-%d\')\n                url = \'https://www.google.com/flights/#search;f=\'+source+\';t=\'+d+\';d=\'+start_date+\';r=\'+end_date+\'\'\n                browser_screenshot(url,start_date, end_date,d,source)\n\n\ndef delete_files(source):\n    unique_path = str(get_user_id())\n    folder = request.env.web2py_path +\'/applications/travel/static/images/user_images/\' + unique_path + \'/\' + source + \'/\'\n    db((db.user_request_images.created_by==auth.user.id)).delete()\n    if os.path.isdir(folder):\n        for the_file in os.listdir(folder):\n            file_path = os.path.join(folder, the_file)\n            try:\n                if os.path.isfile(file_path):\n                    os.unlink(file_path)\n                elif os.path.isdir(file_path): shutil.rmtree(file_path)\n            except Exception as e:\n                print(e)\n\ndef process_data():\n    dest = []\n    unique_path = str(get_user_id())\n    start_index = request.args[0]\n    start_index = start_index.replace(\'D\',\'\')\n    ttl_duration = request.args[1]\n    ttl_duration = ttl_duration.replace(\'F\',\'\')\n    if(len(request.args) > 1):\n        for val in request.args[2:]:\n            dest.append(val)\n    else:\n        dest = [\'DEN\',\'LAX\', \'SFO\']\n    start_index = int(start_index)\n    ttl_duration = int(ttl_duration)\n    weekend_dates = populate_weekend_dates(start_index, ttl_duration)\n    source = get_airport_code()\n    delete_files(source)\n    if(source in dest):\n        dest.remove(source)\n    call_all_destinations(source, weekend_dates,dest, start_index)\n    db.commit()\n    t = threading.Thread(grab_data())\n    t.start()\n    redirect(URL(\'home\'), client_side=True)\n\n\ndef user_profile():\n    source_code = db((db.user_airport_code.created_by==auth.user.id)).select(db.user_airport_code.three_letter_code).first().three_letter_code\n    form = display_profile_form()\n    return dict(form=form, source_code=source_code)\n\ndef display_profile_form():\n    db.user_airport_code.created_on.writable =False\n    db.user_airport_code.created_on.readable = False\n    record =  db.user_airport_code(request.args(0))\n    form = SQLFORM(db.user_airport_code, record)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    return form\n\ndef get_user_id():\n    user_id = auth.user.id\n    return user_id\n\n\n\ndef destinations():\n    return dict(form=display_dest_form().process(),\n                dest=db((db.user_dest.created_by==auth.user.id)).select(db.user_dest.three_letter_code))\n\ndef display_dest_form():\n    db.user_dest.created_on.writable=False\n    db.user_dest.created_on.readable=False\n    db.user_dest.created_by.writable=False\n    db.user_dest.created_by.readable=False\n    form = SQLFORM(db.user_dest)\n    if form.process().accepted:\n        response.flash = request.args\n    elif form.errors:\n        response.flash = str(form.errors)\n    return form\n\n\ndef delete_dest():\n    code = request.args[0]\n    if code==None:\n        output = "Missing parameter"\n        return output\n    dest = db((db.user_dest.created_by==auth.user.id) & (code ==db.user_dest.three_letter_code))\n    if dest==None:\n        output = "delete error"\n    else:\n        dest.delete()\n\n\ndef get_subs(a_dir):\n    return [name for name in os.listdir(a_dir)\n            if os.path.isdir(os.path.join(a_dir, name))]\n\ndef delete_resize_files(folder):\n\tfor the_file in os.listdir(folder):\n\t\tfile_path = os.path.join(folder, the_file)\n\t\ttry:\n\t\t\tif os.path.isfile(file_path):\n\t\t\t\tos.unlink(file_path)\n\t\t\telif os.path.isdir(file_path): shutil.rmtree(file_path)\n\t\texcept Exception as e:\n\t\t\tprint(e)\n\n\ndef grab_data():\n    # flight_set = db(db.user_flight_prices.created_by==auth.user.id)\n    # flight_set.delete()\n    path = request.env.web2py_path +\'/applications/travel/static/images/user_images/\'\n    resize_path = request.env.web2py_path +\'/applications/travel/static/images/resized/\'\n    usr_dir = str(get_user_id())\n    f1 = []\n    f2 = []\n    image_text = []\n    resize_path = resize_path + usr_dir\n    path = path + usr_dir\n    src_dirs = get_subs(path)\n    #\tprint \'resize: \' + resize_path\n    #\tprint \'path: \' + path\n    #\tprint  src_dirs\t\n    for src_dir in src_dirs:\n        p = Process(target= make_call, args=(path, resize_path,usr_dir, f1, f2, image_text, src_dir,))\n        p.start()\n        p.join()\n        #make_call(path, resize_path,usr_dir, f1, f2, image_text, src_dir)\n    \n    \ndef make_call(path, resize_path, usr_dir, f1, f2, image_text, src_dir):\n    resize_path = resize_path + \'/\' + src_dir\n    path = path + \'/\' + src_dir\n    dest_dirs = get_subs(path)\n#\t\tprint \'resize: \' +resize_path\n#\t\tprint \'path: \' + path\n#\t\tprint  src_dirs\t\n\n    for dest in dest_dirs:\n        resize_path = resize_path + \'/\' + dest\n        path = path + \'/\' + dest\n#\t\t\tprint \'resize: \' +resize_path\n#\t\t\tprint \'path: \' + path\n\n        if not os.path.exists(resize_path):\n                os.makedirs(resize_path)\n        else:\n            delete_resize_files(resize_path)\n\n\n        for (dirpath, dirnames, filenames) in walk(path):\n                f1.extend(filenames)\n#        \t\t\tprint filenames\n                break\n        filenames.sort()\n\n        for f in filenames:\n            basewidth = 1000\n            reg_path = path + \'/\' + f\n#\t\t\t\tprint \'reg_path: \' + reg_path\n            img2 = cv2.imread(reg_path,1)\n            height, width, channels = img2.shape\n            img2 = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)\n            img2 = img2[400:(height-148), 0:150]\n            cv2.imwrite(resize_path + \'/\' +  f, img2)\n            img = Image.open(resize_path + \'/\' +  f)\n            wpercent = (basewidth/float(img.size[0]))\n            hsize = int((float(img.size[1])*float(wpercent)))\n            img = img.resize((basewidth,hsize), PIL.Image.ANTIALIAS)\n            img.save(resize_path + \'/\' +  f,  dpi=(1000,1000))\n\n\n        for (dirpath, dirnames, filenames_2) in walk(resize_path):\n            f2.extend(filenames_2)\n            break\n\n        for idx, f2 in enumerate(filenames_2):\n            newpath = resize_path  + \'/\' + f2\n            im = Image.open(newpath)\n            image_text.append(image_to_string(im))\n            image_list = image_text[idx].splitlines()\n            image_list = map(lambda image_list: image_list.replace(\',\',\'\'), image_list)\n            image_list = filter(None, image_list)\n            image_list = filter(lambda name: name.strip(), image_list)\n            for item in  image_list:\n# \t\t\t\t\tprint item\n                new_item = re.search(ur\'([$])(\\d+(?:\\.\\d{2})?)\', item)\n                depart_date = f2.replace(\'flight\', \'\')[:-16]\n                return_date = f2.replace(\'flight\', \'\').replace(\'->\',\'\')[10:][:-4]\n                if new_item is not None:\n                    db.user_flight_prices.insert(src_three_letter_code = src_dir, dest_three_letter_code=dest, price=new_item.groups()[1],departure_date=depart_date, return_date=return_date)\n        resize_path = resize_path.replace(\'/\' + dest, \'\')\n        path = path.replace(\'/\' + dest, \'\')\n        f1 = []\n        f2 = []\n        image_text = []\n        image_list = []\n    resize_path = resize_path.replace(usr_dir + \'/\' + src_dir, \'\')\n    path = path.replace(usr_dir + \'/\' + src_dir, \'\')\n    db.commit()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    \n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(user)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/Travel/controllers/default.py", line 448, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/applications/Travel/controllers/default.py", line 427, in user\n    return dict(form=auth())\n  File "/home/www-data/web2py/gluon/tools.py", line 1941, in __call__\n    return getattr(self, args[0])()\n  File "/home/www-data/web2py/gluon/tools.py", line 2963, in login\n    user = table_user(**{username: entered_username})\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 546, in __call__\n    orderby_on_limitby=False).first()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n    self.execute(sql)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/home/www-data/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/www-data/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, u"Table \'travel.auth_user\' doesn\'t exist")\n'
p11
s.